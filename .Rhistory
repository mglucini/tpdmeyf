#Arbol elemental con libreria  rpart
require("data.table")
require("rpart")
#Aqui se debe poner la carpeta de la computadora local
setwd("M:\\")  #Establezco el Working Directory
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos de 202009 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasetsOri/paquete_premium_202009.csv")
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data = dtrain,
xval=0,
cp=        -0.3,
minsplit=  80,
minbucket=  1,
maxdepth=   8 )
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasetsOri/paquete_premium_202011.csv")
prediccion  <- predict( modelo, dapply , type = "prob") #aplico el modelo
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
dapply[ , Predicted  := as.numeric(prob_baja2 > 0.025) ]
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
fwrite( entrega, file="./kaggle/K101_001.csv", sep="," )
clear()
clear
#limpio la memoria
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#Aqui se debe poner la carpeta de la computadora local
setwd("M:\\")  #Establezco el Working Directory
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dtrain  <- fread("./datasetsOri/paquete_premium_202009.csv")
dapply  <- fread("./datasetsOri/paquete_premium_202011.csv")
for( profundidad  in  c(2,3,4,5,6,7,8,10,12,14,16,18,20,22,24,26,28,30) )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dtrain,
xval= 0,
cp= -1,
maxdepth= profundidad )
prediccion  <- predict( modelo, dapply , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
dapply[ , Predicted  := as.numeric(prob_baja2 > 0.025) ]
entrega  <- dapply[  , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
fwrite( entrega,
file= paste0( "./kaggle/K110_h",  profundidad, ".csv"),
sep= "," )
}
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
ksemilla  <- 122323  #Cambiar por la primer semilla de cada uno !
#divido en training/testing
set.seed( ksemilla )
fold  <- ifelse( runif( nrow(dataset) ) <  0.7, 1, 2 )
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1], #1 es training
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
ksemilla  <- 122323  #Cambiar por la primer semilla de cada uno !
#divido en training/testing
set.seed( ksemilla )
fold  <- ifelse( runif( nrow(dataset) ) <  0.7, 1, 2 )
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1], #1 es training
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 122323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 122323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
View(prediccion)
View(modelo)
View(modelo)
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 122323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 192323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
install.packages("rpart.plot")
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
require("rpart.plot")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 192323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
pdf(file ="./work/MiPrimerArbol_01.pdf", paper="usr" )
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
dev.off()
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
require("rpart.plot")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 122323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
pdf(file ="./work/MiPrimerArbol_01.pdf", paper="usr" )
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
dev.off()
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
require("rpart.plot")
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 192323 )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= dataset[ fold==1],
xval= 0,
cp= -1,
maxdepth= 6 )
pdf(file ="./work/MiPrimerArbol_02.pdf", paper="usr" )
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
dev.off()
prediccion  <- predict( modelo, dataset[ fold==2] , type= "prob") #aplico el modelo
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 > 0.025, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
ganancia_test_normalizada
source('C:/Users/mgluc/Desktop/Facultad/Data Mining/DataMiningenEconomíayFinanzas/dmeyf/src/rpart/240_montecarlo.r', encoding = 'UTF-8', echo=TRUE)
#limpio la memoria
rm(list=ls())   #remove all objects
gc()            #garbage collection
require("data.table")
require("parallel")
require("rpart")
#setwd( "M:\\" )
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")
ksemillas  <- c(122323, 192323, 232303, 22323, 252323) #reemplazar por las propias semillas
ksemilla_extra  <- 23  #reemplazar por una elegida en el momento
#------------------------------------------------------------------------------
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ ,  (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ], #training  fold==1
xval= 0,
control= param )
#aplico el modelo a los datos de testing, fold==2
prediccion  <- predict( modelo, data[ fold==fold_test, ], type = "prob")
prob_baja2  <- prediccion[, "BAJA+2"]
ganancia_testing  <- sum(  data[ fold==fold_test ][ prob_baja2 >0.025,  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ] )
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia  <- function( semilla, data, param )
{
pct_test  <- 30/(30+70)
particionar( data, division=c(70,30), agrupa="clase_ternaria", seed=semilla )
ganancia_testing  <- ArbolSimple( 2, data, param )
ganancia_testing_normalizada  <- ganancia_testing / pct_test   #normalizo la ganancia
return( ganancia_testing_normalizada )
}
#------------------------------------------------------------------------------
ArbolesMontecarlo  <- function( data, param, semillas )
{
ganancias  <- mcmapply( ArbolEstimarGanancia,
semillas,
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )  #se puede subir a 5 si posee Linux o Mac OS
#devuelvo la primer ganancia y el promedio
return( mean( unlist( ganancias ))  )
}
#------------------------------------------------------------------------------
#cargo los datos donde voy a ENTRENAR el modelo
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
#inicializo la tabla donde voy a dejar los resultados
tb_resultados  <- data.table( maxdepth=integer(), ganancia1=numeric(), ganancia5=numeric()  )
for(  vmaxdepth in  c(4,5,6,7,6,9,10,11) )
{
param_basicos  <- list( "cp"=-1, "minsplit"=20, "minbucket"=7,  "maxdepth"= vmaxdepth )
gan1  <- ArbolesMontecarlo( dataset, param_basicos, ksemilla_extra )
gan5  <- ArbolesMontecarlo( dataset, param_basicos, ksemillas )
tb_resultados  <- rbind( tb_resultados, list( vmaxdepth, gan1, gan5 ) )
}
tb_resultados
#!/usr/bin/Rscript
#limpio la memoria
rm(list=ls())   #remove all objects
gc()            #garbage collection
require("data.table")
require("parallel")
require("rpart")
setwd("C:\\Users\\mgluc\\Desktop\\Facultad\\Data Mining\\DataMiningenEconomíayFinanzas")
ksemillas  <- c(122323, 192323, 232303, 22323, 252323) #reemplazar por las propias semillas
#------------------------------------------------------------------------------
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ], #training  fold==1
xval= 0,
control= param )
#aplico el modelo a los datos de testing, fold==2
prediccion  <- predict( modelo, data[ fold==fold_test, ], type = "prob")
prob_baja2  <- prediccion[, "BAJA+2"]
ganancia_testing  <- sum(  data[ fold==fold_test ][ prob_baja2 >0.025,  ifelse( clase_ternaria=="BAJA+2", 48750, -1250 ) ] )
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ArbolesCrossValidation  <- function( data, param, qfolds, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla )
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a 5 si posee Linux o Mac OS
#devuelvo la primer ganancia y el promedio
return( mean( unlist( ganancias )) *  qfolds )   #aqui normalizo
}
#------------------------------------------------------------------------------
#cargo los datos donde voy a ENTRENAR el modelo
dataset  <- fread("./datasetsOri/paquete_premium_202009.csv")
#inicializo la tabla donde voy a dejar los resultados
tb_resultados  <- data.table( maxdepth=integer(), ganancia=numeric() )
for(  vmaxdepth in  c(4,5,6,7,8,9,10,11) )
{
param_basicos  <- list( "cp"=-1, "maxdepth"= vmaxdepth )
gan  <- ArbolesCrossValidation( dataset,
param_basicos,
qfolds= 5, # 5-fold cross validation
semilla= ksemillas[1] )  #uso solo la primer semilla para particionar el dataset
tb_resultados  <- rbind( tb_resultados, list( vmaxdepth, gan ) )
}
tb_resultados
